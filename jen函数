网络下载文件
def get_web_txt(url){
	try {
		def conn = new URL(url).openConnection()
		conn.setRequestProperty("authorization",BITBUCKET_TOKEN)
		return conn.content.text.trim()
	} catch(err){
		println "[ERROR GET ] get_web_txt 有错误：" + err.toString()
	}
}
config = readJSON text: get_web_txt("http://10.217.156.13:7990/projects/DTA/repos/panamera/raw/opt_log_bci/config?at=refs%2Fheads%2Fjenkins_backup_files")


新建
build job: 'xxx', parameters: [
						string(name: 'Branch', value: params.PULL_REQUEST_FROM_BRANCH),
						string(name: 'PULL_REQUEST_TO_BRANCH', value: params.PULL_REQUEST_TO_BRANCH)],
						wait: false


打散               
Collections.shuffle(full_test_cases)


通知bitbucket
notifyBitbucket commitSha1: params.PULL_REQUEST_FROM_HASH,
											considerUnstableAsSuccess: false,
											credentialsId: CREDENTIAL_ID_FOR_NOTIFY_BITBUCKET,
											disableInprogressNotification: false,
											ignoreUnverifiedSSLPeer: false,
											includeBuildNumberInKey: false,
											prependParentProjectKey: false,
											projectKey: '',
											stashServerBaseUrl: BITBUCKET_URL


log解析
logParser failBuildOnError: false, projectRulePath: "/home/dev/jenkins_files/logparse", unstableOnWarning: false, useProjectRule: true


下载commit
cmd = 'git init && git remote add origin ' +  URL + ' && git fetch origin ' + commitID + ' && git reset --hard FETCH_HEAD && git rev-parse HEAD'
git rev-parse HEAD

下载branch
cmd = 'git clone --depth 1 --single-branch -b ' + Branch + ' ' + URL
git rev-parse HEAD


下载和merge
withCredentials([sshUserPrivateKey(credentialsId: CREDENTIAL_ID, keyFileVariable: 'credential', passphraseVariable: '', usernameVariable: 'username')] ) {
	rsp = sh label: '', returnStdout: true, script:
		"""
		# 初始化
		git init

		# download fw_repo
		git remote add origin $URL
		git fetch origin $Branch
		git reset --hard FETCH_HEAD
		git checkout -b $Branch

		# download target branch like master
		git checkout master
		git fetch origin $MergeTarget
		git reset --hard FETCH_HEAD

		# merge fw_repo to master
		echo '=========== pre_merge to master ============='
		git merge $Branch -m 'pre_merge to target'
	"""
	rsp.split('\n').toList().each{println it}
	}


下线 - 1
if [ ! -e jenkins-cli.jar ]; then
	wget ${JENKINS_URL}jnlpJars/jenkins-cli.jar
fi
java -jar jenkins-cli.jar -s ${JENKINS_URL} -auth AutoMerge:AutoMerge offline-node $slot -m $reason
java -jar jenkins-cli.jar -s ${JENKINS_URL} -auth AutoMerge:AutoMerge wait-node-offline $slot


下线 - 2
Jenkins.instance.getNode(per_slot).toComputer().setTemporarilyOffline(false)
Jenkins.instance.getNode(per_slot).toComputer().doChangeOfflineCause("Offline_by_${BUILD_USER.split(' ').toList()[1]}_${BUILD_TAG}")
currentBuild.description += "<br> ===== offline ${per_slot} 结束 ===== <br>"


上线
Jenkins.instance.getNode(per_node).toComputer().cliOnline()


下线原因
offline_reason = []
for (aSlave in hudson.model.Hudson.instance.slaves) {
	if(aSlave.getComputer().isOffline()){
		offline_reason += aSlave.getComputer().getOfflineCause().toString().split('\n')[0]
	}
}
offline_reason.unique().sort().each{println it+','}
