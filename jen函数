网络下载文件
def web_txt(url){
	try {
		def conn = new URL(url).openConnection()
		conn.setRequestProperty("authorization",BITBUCKET_TOKEN)
		return conn.content.text.trim()
	} catch(err){
		println "[ERROR GET ] web_txt 有错误：" + err.toString()
	}
}
config = readJSON text: get_web_txt(url)


新建
build job: 'xxx', parameters: [
						string(name: 'Branch', value: params.PULL_REQUEST_FROM_BRANCH),
						string(name: 'PULL_REQUEST_TO_BRANCH', value: params.PULL_REQUEST_TO_BRANCH)],
						wait: false


打散               
Collections.shuffle(full_test_cases)


通知bitbucket
notifyBitbucket commitSha1: params.PULL_REQUEST_FROM_HASH,
											considerUnstableAsSuccess: false,
											credentialsId: CREDENTIAL_ID_FOR_NOTIFY_BITBUCKET,
											disableInprogressNotification: false,
											ignoreUnverifiedSSLPeer: false,
											includeBuildNumberInKey: false,
											prependParentProjectKey: false,
											projectKey: '',
											stashServerBaseUrl: BITBUCKET_URL


log解析
def ParseLog() {
	stage('ParseLog') {
		node ('fw') {
			deleteDir()
			logParser failBuildOnError: false, projectRulePath: "/home/dev/jenkins_files/logparse", unstableOnWarning: false, useProjectRule: true
		}
	}
}


下载commit
cmd = 'git init && git remote add origin ' +  URL + ' && git fetch origin ' + commitID + ' && git reset --hard FETCH_HEAD && git rev-parse HEAD'
git rev-parse HEAD

下载branch
cmd = 'git clone --depth 1 --single-branch -b ' + Branch + ' ' + URL
git rev-parse HEAD


下载和merge
withCredentials([sshUserPrivateKey(credentialsId: CREDENTIAL_ID, keyFileVariable: 'credential', passphraseVariable: '', usernameVariable: 'username')] ) {
	rsp = sh label: '', returnStdout: true, script:
		"""
		# 初始化
		git init

		# download fw_repo
		git remote add origin $URL
		git fetch origin $Branch
		git reset --hard FETCH_HEAD
		git checkout -b $Branch

		# download target branch like master
		git checkout master
		git fetch origin $MergeTarget
		git reset --hard FETCH_HEAD

		# merge fw_repo to master
		echo '=========== pre_merge to master ============='
		git merge $Branch -m 'pre_merge to target'
	"""
	rsp.split('\n').toList().each{println it}
	}


下线 - 1
if [ ! -e jenkins-cli.jar ]; then
	wget ${JENKINS_URL}jnlpJars/jenkins-cli.jar
fi
java -jar jenkins-cli.jar -s ${JENKINS_URL} -auth AutoMerge:AutoMerge offline-node $slot -m $reason
java -jar jenkins-cli.jar -s ${JENKINS_URL} -auth AutoMerge:AutoMerge wait-node-offline $slot


下线 - 2
Jenkins.instance.getNode(per_slot).toComputer().setTemporarilyOffline(false)
Jenkins.instance.getNode(per_slot).toComputer().doChangeOfflineCause("Offline_by_${BUILD_USER.split(' ').toList()[1]}_${BUILD_TAG}")
currentBuild.description += "<br> ===== offline ${per_slot} 结束 ===== <br>"


上线
Jenkins.instance.getNode(per_node).toComputer().cliOnline()


下线原因
offline_reason = []
for (aSlave in hudson.model.Hudson.instance.slaves) {
	if(aSlave.getComputer().isOffline()){
		offline_reason += aSlave.getComputer().getOfflineCause().toString().split('\n')[0]
	}
}
offline_reason.unique().sort().each{println it+','}


离线slot
slots = []
for (slot in hudson.model.Hudson.instance.slaves) {
	if(slot.getComputer().isOffline() && !slot.getRootPath()){
		slots.add(slot.name.toString())
	}
}
slots.each{println it+","}


ssh相关
sshpass -p ufsufs ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p 22 user@ip cmd


扫描
curl -u **** -X POST http://xxxx/api/project_branches/delete?branch=yyy&project=zzz

export PATH=\$PATH:${env.WORKSPACE}/sonar-scanner-${sonarqube_version}-linux/build-wrapper-linux-x86:${env.WORKSPACE}/sonar-scanner-${sonarqube_version}-linux/bin

${env.WORKSPACE}/sonar-scanner-${sonarqube_version}-linux/build-wrapper-linux-x86/build-wrapper-linux-x86-64 --out-dir output python ./build.py

sonar-scanner-4.7.0.2747-linux/bin/sonar-scanner 
-Dsonar.projectKey=???
-Dsonar.sources=???
-Dsonar.cfamily.build-wrapper-output=output
-Dsonar.branch.name=???
-Dsonar.host.url=???
-Dsonar.login=??? 
-Dsonar.projectVersion=??? 
-Dsonar.cfamily.threads=2 
-Dsonar.cfamily.cache.enabled=false 
-Dsonar.c.file.suffixes=- 
-Dsonar.cpp.file.suffixes=- 
-Dsonar.objc.file.suffixes=- 
-Dsonar.python.version=3.8

curl -u **** url/api/ce/task?id=？？？

json 格式
import groovy.json.JsonSlurperClassic
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
groovy.json.JsonOutput.prettyPrint(JsonOutput.toJson(json).toString())


input 插件
def a = input message: 'select:', parameters: [extendedChoice (defaultValue: '', description: '', 
							multiSelectDelimiter: ',', 
							name: 'feature_list', 
							quoteValue: false, 
							saveJSONParameterToFile: false, 
							type: 'PT_CHECKBOX', 
							value: feature_list_tmp, 
							visibleItemCount: 20)]


单纯get
def get_http_get_info(url){

	try {
		timeout(1){
			println "[INFO GET]" + url
			
			// 创建url链接
			def conn = new URL(url).openConnection()
			conn.setRequestMethod("GET") 
			conn.setRequestProperty("Content-Type", "application/json")
			conn.setRequestProperty("authorization",BITBUCKET_TOKEN)	

			def json = new JsonSlurperClassic().parseText(conn.content.text)
			println "[INFO GET Rsp] " + json
			return json
			
		}
	} catch(err){
		println "[ERROR GET ] get_http_get_info 有错误：" + err.toString()
		return (new JsonSlurperClassic().parseText("{}"))
	}
}


get 和 post
def get_http_post_info(url, data) {
	try {
		timeout(1){
			data = data.toString()
			println "[INFO POST]" + url + " : " + groovy.json.JsonOutput.prettyPrint(data)
			
			// 创建url链接
			def conn = new URL(url).openConnection()
			conn.setRequestMethod("POST") 
			conn.setRequestProperty("Content-Type", "application/json")
			conn.setRequestProperty("authorization",BITBUCKET_TOKEN)
			conn.doOutput = true

			def writer = new OutputStreamWriter(conn.outputStream)
			writer.write(data)
			writer.flush()
			writer.close()
			
			// 返回值
			return (new JsonSlurperClassic().parseText(conn.content.text))
		}		
	} catch (err) {
		println "[ERROR POST] get_http_post_info 有错误：" + err.toString()
		return (new JsonSlurperClassic().parseText("{}"))
	}
}


// 获取job的最后一个状态信息 SUCCESS/FAILURE/UNSTABLE/ 和空
def get_job_result(job) {
	try {
		return Jenkins.instance.getItemByFullName(job).getLastBuild().getResult().toString()
	} catch (err) {
		println err.toString()
		return ""
	}
}


// 在description中显示信息
def add_description(content){	
	def current_time =new Date().format("yyyy-MM-dd HH:mm:ss").toString()
	currentBuild.description += "<p style='color:red'>错误信息 (${current_time}) : ${content}</p>"
}


找文件
findFiles(glob: '**/_log.txt')


删文件
find ${sh_exe_path}${BUILD_TAG} -name "\${item}*" -print0 | xargs -0 rm -rf


切割文件
[ `du -m ${uart_files[0].path} | cut -f 1` -gt 100 ] && split -b 100m -d -a 3 ${uart_files[0].path} ${uart_files[0].path}_ || echo "not_over_100m"


找slot的标签
jenkins.model.Jenkins.instance.getNode(NODE_NAME).getLabelString().split(' ').toList()


Merge 后的commit id
def Get_Merge_Commit_ID() {
	node ('fw') {		
		try{
			def merge_commit_url = BITBUCKET_URL + "rest/api/latest/projects/${real_project}/repos/${PULL_REQUEST_FROM_REPO_NAME}/pull-requests/${PULL_REQUEST_ID}/activities"
			def json = get_http_get_info(merge_commit_url)
			merge_commit_id = json.values.commit.id[0]	
			println "[INFO] Merge 后的commit id是 ${merge_commit_id}"
		} catch(err){
			println "[ERROR] Get_Merge_Commit_ID 有错误： " + err.toString()
			error "[ERROR] Get_Merge_Commit_ID 有错误"
		}
		return merge_commit_id
	}
}
